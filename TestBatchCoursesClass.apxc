@isTest
public class TestBatchCoursesClass {

  @isTest
    static void withoutChildren() {

       List<House__c> houses = TestDataFactory.house(1, null, false);

       Test.startTest();
       BatchCoursesClass bcc = new BatchCoursesClass();
       Id batchId = Database.executeBatch(bcc);
       houses =[SELECT Id, Number_Child__c FROM House__c];

       System.assertEquals(0, houses.get(0).Number_Child__c);
       

    }

 @isTest
    static void withOneChildren() {

       List<House__c> houses = TestDataFactory.houseShop(1, null, false,1);

       Test.startTest();
       BatchCoursesClass bcc = new BatchCoursesClass();
       Id batchId = Database.executeBatch(bcc);
       houses =[SELECT Id, Number_Child__c FROM House__c];

       System.assertEquals(0, houses.get(0).Number_Child__c);
       

    }

 @isTest
    static void withTenChildren() {

       List<House__c> houses = TestDataFactory.houseShop(1, null, false, 10);

       Test.startTest();
       BatchCoursesClass bcc = new BatchCoursesClass();
       Id batchId = Database.executeBatch(bcc);
       houses =[SELECT Id, Number_Child__c FROM House__c];

       System.assertEquals(10, houses.get(0).Number_Child__c);
       

    }
@isTest
    static void oneHundredHouseWithTenChildren() {

       List<House__c> houses = TestDataFactory.houseShop(100, null, false, 10);

       Test.startTest();
       BatchCoursesClass bcc = new BatchCoursesClass();
       Id batchId = Database.executeBatch(bcc);
       houses =[SELECT Id, Number_Child__c FROM House__c];

       System.assertEquals(10, houses.get(0).Number_Child__c);
       

    }

 
   
}
